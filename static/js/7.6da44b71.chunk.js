(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{255:function(e,t,n){"use strict";n.r(t);var a=n(0),r=n.n(a),s=n(251),i=n(244),o=n(9),l=n(4);t.default=function(){return r.a.createElement(o.c,null,r.a.createElement(o.b,{name:"custom",heading:"\ud83d\udd25\ud83d\udd25 Custom hooks \ud83d\udd25\ud83d\udd25",withImage:!0},r.a.createElement(l.g,null,r.a.createElement(l.h,{customDot:"fire"},"Where it really becomes cool is custom hooks"),r.a.createElement(l.h,{customDot:"heart"},"https://usehooks.com")),r.a.createElement(s.a,{language:"jsx",style:i.a},"import React, { useState, useEffect } from 'react';\n\nfunction useFriendStatus(friendID) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  function handleStatusChange(status) {\n    setIsOnline(status.isOnline);\n  }\n\n  useEffect(() => {\n    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);\n    };\n  });\n\n  return isOnline;\n}")),r.a.createElement(o.b,{name:"intro",heading:"Custom hooks is awesome",withImage:!0},r.a.createElement(l.g,null,r.a.createElement(l.h,{customDot:"heart"},"Neatly package together functionality"),r.a.createElement(l.h,{customDot:"heart"},"So much stuff can be simplified"))),r.a.createElement(o.b,{name:"usebrand",heading:"Brand context",withImage:!0},r.a.createElement(s.a,{language:"jsx",style:i.a},"\nexport const withTexts = text => Wrapper => props => (\n   <BrandContext.Consumer>\n       {(brand) => {\n           const selectedTexts = text[brand || BRANDS.SOME_BANK];\n           return <Wrapper {...selectedTexts} {...props} />;\n       }}\n   </BrandContext.Consumer>\n);\n\nexport const useTexts = (texts) => {\n   const brand = useBrand();\n   return texts[brand] || {};\n};")),r.a.createElement(o.b,{name:"formvalidation",heading:"Form validation hook",withImage:!0},r.a.createElement(s.a,{language:"jsx",style:i.a},"import React from 'react';\nimport produce from 'immer';\n\nexport const validationReducer = produce((draft, action) => {\n    switch (action.type) {\n        case 'VALIDATE':\n            action.toValidate.forEach(({ fieldName, value }) => {\n                if (draft[fieldName].validate(value)) {\n                    draft[fieldName].hasError = false;\n                } else {\n                    draft[fieldName].hasError = true;\n                }\n            });\n            return draft;\n        default:\n            return draft;\n    }\n});\n\n// init function to register all fields to the reducer\nconst init = fields =>\n    fields.reduce(\n        (acc, { fieldName, ...field }) => ({\n            [fieldName]: { ...field },\n            ...acc,\n        }),\n        {},\n    );\n\n/**\n * Custom hook for validation\n * Expects and array of fields with fieldName, errorMessage and validator function\n * Returns an array of functions to get error message, validate field and get any validation error\n */\nconst useValidation = (fields) => {\n    const [state, dispatch] = React.useReducer(validationReducer, fields, init);\n\n    const getFieldErrorMessage = fieldName =>\n        state[fieldName] && state[fieldName].hasError && state[fieldName].errorMessage;\n\n    const hasValidationError = () => Object.keys(state).some(field => state[field].hasError);\n\n    const validateField = toValidate =>\n        dispatch({\n            type: 'VALIDATE',\n            toValidate,\n        });\n\n    return [getFieldErrorMessage, validateField, hasValidationError];\n};\n\nexport default useValidation;")))}}}]);
//# sourceMappingURL=7.6da44b71.chunk.js.map