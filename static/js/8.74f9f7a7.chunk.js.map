{"version":3,"sources":["slides/ElateConf/immer/Immer.jsx","slides/ElateConf/immer/example/mutating.js","slides/ElateConf/immer/example/immutable.js"],"names":["Immer","react_default","a","createElement","components","name","heading","withImage","baseComponents","prism","language","style","okaidia","customDot","href"],"mappings":"qJA8DeA,UAtDD,WACZ,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,KAAK,QAAQC,QAAQ,2BAA2BC,WAAS,GAC9DN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,mCACAP,EAAAC,EAAAC,cAACK,EAAA,EAAD,4BACAP,EAAAC,EAAAC,cAACK,EAAA,EAAD,6DAKJP,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,KAAK,UAAUC,QAAQ,UAAUC,WAAS,GAC/CN,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAmBC,SAAS,MAAMC,MAAOC,KCrB5B,+EDyBfX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,KAAK,QAAQC,QAAQ,WAAWC,WAAS,GAC9CN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUK,UAAU,QAApB,wCAGAZ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUK,UAAU,QAApB,qCAGAZ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUK,UAAU,QAApB,gDAGAZ,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAmBC,SAAS,MAAMC,MAAOC,KEpC7B,4PFuCZX,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAmBC,SAAS,MAAMC,MAAOC,KE1B1B,+XF+BnBX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,KAAK,YAAYC,QAAQ,mBAC9BL,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAmBC,SAAS,MAAMC,MAAOC,KEjBzB,2iBFqBlBX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,KAAK,YAAYC,QAAQ,aAC9BL,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUK,UAAU,QAClBZ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYM,KAAK,wCAAjB","file":"static/js/8.74f9f7a7.chunk.js","sourcesContent":["import React from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { okaidia } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport { Slide, SlideDeck } from \"../../../components\";\nimport { List, ListItem, LinkButton } from \"../../../baseComponents\";\nimport { mutating } from \"./example/mutating\";\nimport { immutable, reduxNoImmer, thisProject } from \"./example/immutable\";\n\nconst Immer = () => {\n  return (\n    <SlideDeck>\n      <Slide name=\"intro\" heading=\"Immutable all the things\" withImage>\n        <List>\n          <ListItem>React prefers immutability</ListItem>\n          <ListItem>Javascript does not</ListItem>\n          <ListItem>\n            Immutability can be cumbersome (read immutable.js)\n          </ListItem>\n        </List>\n      </Slide>\n      <Slide name=\"example\" heading=\"Example\" withImage>\n        <SyntaxHighlighter language=\"jsx\" style={okaidia}>\n          {mutating}\n        </SyntaxHighlighter>\n      </Slide>\n      <Slide name=\"immer\" heading=\"Immer.js\" withImage>\n        <List>\n          <ListItem customDot=\"fire\">\n            Lets you just use mutating functions\n          </ListItem>\n          <ListItem customDot=\"fire\">\n            And immer solves the immutability\n          </ListItem>\n          <ListItem customDot=\"fire\">\n            Super nice for mutating deeply nested object\n          </ListItem>\n          <SyntaxHighlighter language=\"jsx\" style={okaidia}>\n            {immutable}\n          </SyntaxHighlighter>\n          <SyntaxHighlighter language=\"jsx\" style={okaidia}>\n            {reduxNoImmer}\n          </SyntaxHighlighter>\n        </List>\n      </Slide>\n      <Slide name=\"slidedeck\" heading=\"In this project\">\n        <SyntaxHighlighter language=\"jsx\" style={okaidia}>\n          {thisProject}\n        </SyntaxHighlighter>\n      </Slide>\n      <Slide name=\"resources\" heading=\"Resources\">\n        <List>\n          <ListItem customDot=\"fire\">\n            <LinkButton href=\"https://github.com/mweststrate/immer\">\n              Github\n            </LinkButton>\n          </ListItem>\n        </List>\n      </Slide>\n    </SlideDeck>\n  );\n};\n\nexport default Immer;\n","export const mutating = `const someArray = [1, 2, 3];\n\nconst reversedArray = someArray.reverse();`;\n","export const immutable = `import produce from 'immer'\n\nconst byId = produce((draft, action) => {\n  switch (action.type) {\n    case RECEIVE_PRODUCTS:\n      action.products.forEach(product => {\n        draft[product.id] = product\n      })\n      return\n    })\n  }\n})`;\n\nexport const reduxNoImmer = `const byId = (state, action) => {\n    switch (action.type) {\n        case RECEIVE_PRODUCTS:\n            return {\n                ...state,\n                ...action.products.reduce((obj, product) => {\n                    obj[product.id] = product\n                    return obj\n                }, {})\n            }\n        default:\n            return state\n    }\n}`;\n\nexport const thisProject = `const reducer = produce((draft, action) => {\n    switch (action.type) {\n      case \"increment\":\n        draft.activeSlide =\n          draft.activeSlide + 1 < draft.max\n            ? draft.activeSlide + 1\n            : draft.activeSlide;\n        return;\n      case \"decrement\":\n        draft.activeSlide =\n          draft.activeSlide - 1 >= 0 ? draft.activeSlide - 1 : draft.activeSlide;\n        return;\n      case \"set\":\n        draft.activeSlide = action.slide;\n        return;\n      default:\n        throw new Error();\n    }\n  });`;\n"],"sourceRoot":""}