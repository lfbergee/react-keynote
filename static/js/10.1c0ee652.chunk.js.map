{"version":3,"sources":["slides/ElateConf/lazy/example/Example.jsx","slides/ElateConf/lazy/Lazy.jsx","slides/ElateConf/lazy/example/code.js"],"names":["SomeComp","lazy","__webpack_require__","e","then","bind","Example","_useState","useState","_useState2","Object","slicedToArray","showComponent","toggleComponent","react_default","a","createElement","baseComponents","justify","onClick","react","fallback","components","Lazy","name","heading","withImage","prism","language","style","okaidia","example_Example","customDot","href"],"mappings":"8JAIMA,EAAWC,eAAK,kBAAMC,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,aAmBbC,EAjBC,WAAM,IAAAC,EACqBC,oBAAS,GAD9BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACbK,EADaH,EAAA,GACEI,EADFJ,EAAA,GAGpB,OACEK,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASC,QAAQ,UACfJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeE,QAAS,kBAAMN,GAAiBD,KAA/C,mBAGAE,EAAAC,EAAAC,cAACI,EAAA,SAAD,CAAUC,SAAUP,EAAAC,EAAAC,cAACM,EAAA,EAAD,OACjBV,GAAiBE,EAAAC,EAAAC,cAAChB,EAAD,UCsCbuB,UA9CF,kBACXT,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOE,KAAK,QAAQC,QAAQ,kBAAkBC,WAAS,GACrDZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,gFAIAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,2IAMJH,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOE,KAAK,UAAUC,QAAQ,UAAUC,WAAS,GAC/CZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAmBC,SAAS,MAAMC,MAAOC,KCvB9B,iLD0BXhB,EAAAC,EAAAC,cAACe,EAAD,OAEFjB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOE,KAAK,UAAUC,QAAQ,OAAOC,WAAS,GAC5CZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUe,UAAU,QAApB,6BACAlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUe,UAAU,QAApB,qDAGAlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUe,UAAU,SAApB,6CAKJlB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOE,KAAK,YAAYC,QAAQ,aAC9BX,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUe,UAAU,QAClBlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYgB,KAAK,0DAAjB,iBAGAnB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYgB,KAAK,4FAAjB","file":"static/js/10.1c0ee652.chunk.js","sourcesContent":["import React, { Suspense, lazy, useState } from \"react\";\nimport { GridRow, GridCol, PrimaryButton } from \"../../../../baseComponents\";\nimport { Spinner } from \"../../../../components\";\n\nconst SomeComp = lazy(() => import(\"./SomeComp\"));\n\nconst Example = () => {\n  const [showComponent, toggleComponent] = useState(false);\n\n  return (\n    <GridRow justify=\"center\">\n      <GridCol>\n        <PrimaryButton onClick={() => toggleComponent(!showComponent)}>\n          Toggle SomeComp\n        </PrimaryButton>\n        <Suspense fallback={<Spinner />}>\n          {showComponent && <SomeComp />}\n        </Suspense>\n      </GridCol>\n    </GridRow>\n  );\n};\n\nexport default Example;\n","import React from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { okaidia } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport { List, ListItem, LinkButton } from \"../../../baseComponents\";\nimport { Slide, SlideDeck } from \"../../../components\";\nimport { code } from \"./example/code\";\nimport Example from \"./example/Example\";\n\nconst Lazy = () => (\n  <SlideDeck>\n    <Slide name=\"intro\" heading=\"Lazy & Suspense\" withImage>\n      <List>\n        <ListItem>\n          ErrorBoundary gave us a way of catching an error below in the call\n          tree\n        </ListItem>\n        <ListItem>\n          Suspense kinda does the same, however instead of catching an error, it\n          catches a promise thrown by a component wrapped in lazy()\n        </ListItem>\n      </List>\n    </Slide>\n    <Slide name=\"example\" heading=\"Example\" withImage>\n      <SyntaxHighlighter language=\"jsx\" style={okaidia}>\n        {code}\n      </SyntaxHighlighter>\n      <Example />\n    </Slide>\n    <Slide name=\"summary\" heading=\"Lazy\" withImage>\n      <List>\n        <ListItem customDot=\"fire\">Super easy code splitting</ListItem>\n        <ListItem customDot=\"fire\">\n          Step towards the ultimate goal of async rendering\n        </ListItem>\n        <ListItem customDot=\"skull\">\n          Doesn't work with server side rendering\n        </ListItem>\n      </List>\n    </Slide>\n    <Slide name=\"resources\" heading=\"Resources\">\n      <List>\n        <ListItem customDot=\"fire\">\n          <LinkButton href=\"https://reactjs.org/docs/code-splitting.html#reactlazy\">\n            Documentation\n          </LinkButton>\n          <LinkButton href=\"https://hackernoon.com/lazy-loading-and-preloading-components-in-react-16-6-804de091c82d\">\n            Detailed blog post\n          </LinkButton>\n        </ListItem>\n      </List>\n    </Slide>\n  </SlideDeck>\n);\n\nexport default Lazy;\n","export const code = `const SomeComp = lazy(() => import(\"./SomeComp\"))\n\n<App>\n    <Suspense fallback={<Spinner />}>\n        {this.props.showSomeComp && <SomeComp />}\n    </Suspense>\n</App>`;\n"],"sourceRoot":""}