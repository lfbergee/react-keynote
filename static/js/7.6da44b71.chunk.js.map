{"version":3,"sources":["slides/ElateConf/customHooks/CustomHooks.js","slides/ElateConf/customHooks/example/code.js"],"names":["CustomHooks","react_default","a","createElement","components","name","heading","withImage","baseComponents","customDot","prism","language","style","okaidia"],"mappings":"qJA2CeA,UApCK,WAClB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,KAAK,SAASC,QAAQ,iEAAyBC,WAAS,GAC7DN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUC,UAAU,QAApB,gDAGAR,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUC,UAAU,SAApB,yBAEFR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAmBC,SAAS,MAAMC,MAAOC,KCmD1B,ucD/CjBZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,KAAK,QAAQC,QAAQ,0BAA0BC,WAAS,GAC7DN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUC,UAAU,SAApB,yCAGAR,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAUC,UAAU,SAApB,qCAGJR,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,KAAK,WAAWC,QAAQ,gBAAgBC,WAAS,GACtDN,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAmBC,SAAS,MAAMC,MAAOC,KCuB/B,qYDnBZZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,KAAK,iBAAiBC,QAAQ,uBAAuBC,WAAS,GACnEN,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAmBC,SAAS,MAAMC,MAAOC,KCnChC","file":"static/js/7.6da44b71.chunk.js","sourcesContent":["import React from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { okaidia } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport { Slide, SlideDeck } from \"../../../components\";\nimport { List, ListItem } from \"../../../baseComponents\";\nimport { form, brand, customhook } from \"./example/code\";\n\nconst CustomHooks = () => {\n  return (\n    <SlideDeck>\n      <Slide name=\"custom\" heading=\"ðŸ”¥ðŸ”¥ Custom hooks ðŸ”¥ðŸ”¥\" withImage>\n        <List>\n          <ListItem customDot=\"fire\">\n            Where it really becomes cool is custom hooks\n          </ListItem>\n          <ListItem customDot=\"heart\">https://usehooks.com</ListItem>\n        </List>\n        <SyntaxHighlighter language=\"jsx\" style={okaidia}>\n          {customhook}\n        </SyntaxHighlighter>\n      </Slide>\n      <Slide name=\"intro\" heading=\"Custom hooks is awesome\" withImage>\n        <List>\n          <ListItem customDot=\"heart\">\n            Neatly package together functionality\n          </ListItem>\n          <ListItem customDot=\"heart\">So much stuff can be simplified</ListItem>\n        </List>\n      </Slide>\n      <Slide name=\"usebrand\" heading=\"Brand context\" withImage>\n        <SyntaxHighlighter language=\"jsx\" style={okaidia}>\n          {brand}\n        </SyntaxHighlighter>\n      </Slide>\n      <Slide name=\"formvalidation\" heading=\"Form validation hook\" withImage>\n        <SyntaxHighlighter language=\"jsx\" style={okaidia}>\n          {form}\n        </SyntaxHighlighter>\n      </Slide>\n    </SlideDeck>\n  );\n};\n\nexport default CustomHooks;\n","export const form = `import React from 'react';\nimport produce from 'immer';\n\nexport const validationReducer = produce((draft, action) => {\n    switch (action.type) {\n        case 'VALIDATE':\n            action.toValidate.forEach(({ fieldName, value }) => {\n                if (draft[fieldName].validate(value)) {\n                    draft[fieldName].hasError = false;\n                } else {\n                    draft[fieldName].hasError = true;\n                }\n            });\n            return draft;\n        default:\n            return draft;\n    }\n});\n\n// init function to register all fields to the reducer\nconst init = fields =>\n    fields.reduce(\n        (acc, { fieldName, ...field }) => ({\n            [fieldName]: { ...field },\n            ...acc,\n        }),\n        {},\n    );\n\n/**\n * Custom hook for validation\n * Expects and array of fields with fieldName, errorMessage and validator function\n * Returns an array of functions to get error message, validate field and get any validation error\n */\nconst useValidation = (fields) => {\n    const [state, dispatch] = React.useReducer(validationReducer, fields, init);\n\n    const getFieldErrorMessage = fieldName =>\n        state[fieldName] && state[fieldName].hasError && state[fieldName].errorMessage;\n\n    const hasValidationError = () => Object.keys(state).some(field => state[field].hasError);\n\n    const validateField = toValidate =>\n        dispatch({\n            type: 'VALIDATE',\n            toValidate,\n        });\n\n    return [getFieldErrorMessage, validateField, hasValidationError];\n};\n\nexport default useValidation;`;\n\nexport const brand = `\nexport const withTexts = text => Wrapper => props => (\n   <BrandContext.Consumer>\n       {(brand) => {\n           const selectedTexts = text[brand || BRANDS.SOME_BANK];\n           return <Wrapper {...selectedTexts} {...props} />;\n       }}\n   </BrandContext.Consumer>\n);\n\nexport const useTexts = (texts) => {\n   const brand = useBrand();\n   return texts[brand] || {};\n};`;\n\nexport const customhook = `import React, { useState, useEffect } from 'react';\n\nfunction useFriendStatus(friendID) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  function handleStatusChange(status) {\n    setIsOnline(status.isOnline);\n  }\n\n  useEffect(() => {\n    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);\n    };\n  });\n\n  return isOnline;\n}`;\n"],"sourceRoot":""}